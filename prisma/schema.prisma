// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// Business models
model Item {
    // items must be immutable and shouldn't be deleted (if transactions exists) 
    // - create copy instead and set is_active=false
    id              String        @id @default(cuid())
    name            String
    categories      Category[]
    price           Float
    Transaction     Transaction[]
    is_active       Boolean       @default(true)
    for_grouporders Boolean       @default(false)
}

model GroupOrder {
    id                   String              @id @default(cuid())
    name                 String?
    orders               Transaction[]
    ordersCloseAt        DateTime
    aborted              Boolean             @default(false)
    GroupOrderTemplate   GroupOrderTemplate? @relation(fields: [groupOrderTemplateId], references: [id])
    groupOrderTemplateId String?
}

model GroupOrderTemplate {
    id            String       @id @default(cuid())
    name          String
    weekday       Int //0:mon, ..., 6:sun
    ordersCloseAt DateTime
    repeatWeeks   Int          @default(1)
    active        Boolean      @default(true)
    GroupOrders   GroupOrder[]
}

model Category {
    id    String @id @default(cuid())
    name  String
    items Item[]
}

model Transaction {
    id                     String      @id @default(cuid())
    user                   User        @relation("user", fields: [userId], references: [id], onDelete: Cascade)
    userId                 String
    item                   Item?       @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId                 String?
    quantity               Int?
    totalAmount            Float
    createdAt              DateTime    @default(now())
    type                   Int         @default(0) // 0: buy, 1: sell, 2: transfer
    GroupOrder             GroupOrder? @relation(fields: [groupOrderId], references: [id])
    groupOrderId           String?
    //  --- only if transfer (type=2)
    moneyDestination       User?       @relation("moneyDestination", fields: [moneyDestinationUserId], references: [id], onDelete: NoAction)
    moneyDestinationUserId String?
    note                   String?
}

// -----------------------------------------------------------------------------
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String        @id @default(cuid())
    name                    String?
    email                   String?       @unique
    emailVerified           DateTime?
    image                   String?
    accounts                Account[]
    sessions                Session[]
    //  ---
    isAdmin                 Boolean       @default(false)
    balance                 Float         @default(0)
    transactions            Transaction[] @relation("user")
    is_transfer_destiantion Transaction[] @relation("moneyDestination")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
